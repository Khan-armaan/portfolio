"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useForm = void 0;
var react_1 = require("react");
var useForm = function (formId) {
    var _a = (0, react_1.useState)({
        message: "",
        status: false,
    }), error = _a[0], setError = _a[1];
    var _b = (0, react_1.useState)(false), succeeded = _b[0], setSucceeded = _b[1];
    var handleSubmit = function (e, recaptchaRef) {
        e.preventDefault();
        // Getting the Form data
        var data = new FormData(e.currentTarget);
        //@ts-ignore
        var value = Object.fromEntries(data.entries());
        var finalData = __assign({}, value);
        // Conditionally add "g-recaptcha-response" if recaptchaRef is provided
        if (recaptchaRef) {
            finalData["g-recaptcha-response"] = recaptchaRef.current.getValue();
        }
        //check if the values is empty
        //@ts-ignore
        var isEmpty = !Object.values(value).some(function (x) { return x !== null && x !== ""; });
        if (isEmpty) {
            return setError({
                message: "Please fill the form!",
                status: true,
            });
        }
        // submit the form
        fetch("https://formbold.com/s/".concat(formId), {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(finalData),
        })
            .then(function (res) {
            setSucceeded(true);
        })
            .catch(function (error) {
            setError({
                message: error.message,
                status: true,
            });
            setSucceeded(false);
        });
    };
    return [{ error: error, succeeded: succeeded }, handleSubmit];
};
exports.useForm = useForm;
